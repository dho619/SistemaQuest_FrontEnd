{"ast":null,"code":"var _jsxFileName = \"/home/dho/Documentos/InCo/frontend/src/pages/UsuariosLogados/PesquisadosAval/index.js\";\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport api from '../../../services/api';\nimport { setLinkAtual } from '../../../utils/DestacaLink';\nimport { descriptografar } from '../../../utils/criptografia';\nimport MyGrid from \"../../../components/Grid\";\nimport { Div } from \"../../../componentsCSS/Exibir_Grid\";\nexport default class PesquisadosAval extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pesquisados: [],\n      chave: ''\n    };\n\n    this.loadPesquisadosAvaliacao = async () => {\n      const obj = descriptografar(this.props.match.params.chave);\n      const chave = obj.CH;\n      this.setState({\n        chave\n      });\n      api.query({\n        query: gql`\n              query(\n                $chave: String\n              ){\n                pesquisadoChave(filtro: {chave: $chave}){\n                    id nome email telefone inicioAvaliacaoFormatado\n                    pesquisa {\n                        id\n                        chave\n                        resultado\n                        # respostas {\n                        #     pergunta_id\n                        #     resposta\n                        # }\n                    }\n                }\n              }\n            `,\n        variables: {\n          chave\n        }\n      }).then(response => {\n        let pesquisados = response.data.pesquisadoChave; //facilitar na exibicao\n\n        pesquisados.map(p => p.resultado = p.pesquisa ? p.pesquisa.resposta : 'Não finalizou a pesquisa');\n        this.setState({\n          pesquisados\n        });\n      }).catch(e => console.log(e));\n    };\n  }\n\n  //componentDidMount executa assim que e criado a pagina\n  async componentDidMount() {\n    setLinkAtual('nenhum');\n    await this.loadPesquisadosAvaliacao();\n  }\n\n  render() {\n    const columns = [{\n      id: 'nome',\n      label: 'Nome',\n      minWidth: 170\n    }, {\n      id: 'resultado',\n      label: 'Resultado',\n      minWidth: 100\n    }, {\n      id: 'email',\n      label: 'Email',\n      minWidth: 170\n    }, {\n      id: 'telefone',\n      label: 'Telefone',\n      minWidth: 170\n    }, {\n      id: 'inicioAvaliacaoFormatado',\n      label: 'Inicio da Avaliação',\n      minWidth: 170,\n      align: 'right'\n    }];\n    const {\n      pesquisados,\n      chave\n    } = this.state;\n    return React.createElement(Div, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Resposta da chave \", chave, \": \"), React.createElement(\"button\", {\n      className: \"btVoltarAval\",\n      onClick: () => window.location.href = '/avaliacoes',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(ArrowBackIosIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), \"Voltar\")), React.createElement(MyGrid, {\n      orderColumn: \"inicioAvaliacaoFormatado\",\n      order: \"desc\" // ou asc\n      ,\n      columns: columns,\n      rows: pesquisados,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/dho/Documentos/InCo/frontend/src/pages/UsuariosLogados/PesquisadosAval/index.js"],"names":["React","Component","gql","ArrowBackIosIcon","api","setLinkAtual","descriptografar","MyGrid","Div","PesquisadosAval","state","pesquisados","chave","loadPesquisadosAvaliacao","obj","props","match","params","CH","setState","query","variables","then","response","data","pesquisadoChave","map","p","resultado","pesquisa","resposta","catch","e","console","log","componentDidMount","render","columns","id","label","minWidth","align","window","location","href"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport gql from \"graphql-tag\"\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nimport api from '../../../services/api';\nimport { setLinkAtual } from '../../../utils/DestacaLink'\nimport { descriptografar } from '../../../utils/criptografia'\nimport MyGrid from \"../../../components/Grid\";\nimport { Div } from \"../../../componentsCSS/Exibir_Grid\";\n\nexport default class PesquisadosAval extends Component {\n    state = { \n        pesquisados: [],\n        chave:''\n    }\n\n    //componentDidMount executa assim que e criado a pagina\n    async componentDidMount() { \n        setLinkAtual('nenhum')\n        await this.loadPesquisadosAvaliacao()\n    }\n\n    loadPesquisadosAvaliacao = async () => {\n        const obj = descriptografar(this.props.match.params.chave)\n        const chave = obj.CH\n        this.setState({chave})\n        api.query({\n            query: gql`\n              query(\n                $chave: String\n              ){\n                pesquisadoChave(filtro: {chave: $chave}){\n                    id nome email telefone inicioAvaliacaoFormatado\n                    pesquisa {\n                        id\n                        chave\n                        resultado\n                        # respostas {\n                        #     pergunta_id\n                        #     resposta\n                        # }\n                    }\n                }\n              }\n            `,\n            variables: {\n              chave,\n            }\n          }).then(response => {\n            let pesquisados = response.data.pesquisadoChave\n            //facilitar na exibicao\n            pesquisados.map(p => p.resultado = p.pesquisa? p.pesquisa.resposta: 'Não finalizou a pesquisa')\n            this.setState({pesquisados})\n          }).catch(e => console.log(e))\n    }\n\n    render() {\n        const columns = [\n            { id: 'nome',      label: 'Nome',       minWidth: 170 },\n            { id: 'resultado', label: 'Resultado',  minWidth: 100 },\n            { id: 'email',     label: 'Email',      minWidth: 170 },\n            { id: 'telefone',  label: 'Telefone',   minWidth: 170 },\n            { id: 'inicioAvaliacaoFormatado', \n              label: 'Inicio da Avaliação',\n              minWidth: 170,\n              align: 'right',\n            }\n        ];\n        \n        const {pesquisados, chave} = this.state\n        return (\n            <Div>\n                <header>\n                  <h1>Resposta da chave {chave}: </h1>\n                  <button\n                    className='btVoltarAval'\n                    onClick={() => window.location.href='/avaliacoes'}\n                  >\n                    <ArrowBackIosIcon/>Voltar\n                  </button>\n                </header>\n                <MyGrid\n                    orderColumn = 'inicioAvaliacaoFormatado'\n                    order = 'desc'// ou asc\n                    columns={columns}\n                    rows={pesquisados}\n                />\n            </Div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}
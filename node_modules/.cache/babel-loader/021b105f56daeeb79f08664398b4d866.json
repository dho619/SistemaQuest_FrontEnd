{"ast":null,"code":"var _jsxFileName = \"/home/dho/Documentos/InCo/frontend/src/pages/UsuariosLogados/QuestsPlano/index.js\";\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport api from '../../../services/api';\nimport { getUsuarioLogado } from '../../../services/auth';\nimport { setLinkAtual } from '../../../utils/DestacaLink';\nimport Div from './styles';\nexport default class QuestsPlano extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //state e um objeto\n      id: 0,\n      Questionarios: [],\n      page: 0,\n      exibirPerg: new Map(),\n      exibirOpcPerg: new Map(),\n      QuestInfo: {},\n      Usuario: {}\n    };\n\n    this.loadQuest = async (page = 0) => {\n      const {\n        id,\n        Usuario\n      } = this.state;\n      await api.query({\n        query: gql`\n                query(\n                    $id: Int\n                    $usuario_id: Int\n                )\n                {\n                    plano(\n                        filtro: { id: $id usuario_id: $usuario_id }\n                    ){\n                        questionarios { id, nome, perguntas { id descricao opcoes { id descricao }}}\n                    }\n                }\n            `,\n        variables: {\n          id,\n          usuario_id: Usuario.id\n        }\n      }).then(response => {\n        //Simular uma paginasao, ate eu coloca-la no backend ou retirar\n        var Quests = [];\n        var aux = [];\n\n        for (let quest of response.data.plano.questionarios) {\n          if (aux.length < 10) {\n            aux.push(quest);\n          } else {\n            Quests.push(aux);\n            aux = [];\n            aux.push(quest);\n          }\n        }\n\n        if (aux.length > 0) Quests.push(aux);\n        this.setState({\n          Questionarios: Quests[page],\n          QuestInfo: {\n            pages: Quests.length - 1\n          }\n        });\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.exibirPerguntas = id => {\n      let {\n        exibirPerg\n      } = this.state;\n\n      try {\n        let exibir = exibirPerg.get(id);\n\n        if (exibir) {\n          exibirPerg.set(id, false);\n        } else {\n          exibirPerg.set(id, true);\n        }\n      } catch (error) {\n        exibirPerg.set(id, true);\n      }\n\n      this.setState({\n        exibirPerg\n      });\n    };\n\n    this.exibirOpcPerg = id => {\n      let {\n        exibirOpcPerg\n      } = this.state;\n\n      try {\n        let exibir = exibirOpcPerg.get(id);\n\n        if (exibir) {\n          exibirOpcPerg.set(id, false);\n        } else {\n          exibirOpcPerg.set(id, true);\n        }\n      } catch (error) {\n        exibirOpcPerg.set(id, true);\n      }\n\n      this.setState({\n        exibirOpcPerg\n      });\n    };\n  }\n\n  //componentDidMount executa assim que e criado a pagina\n  async componentDidMount() {\n    //nao clk o \"() => \", pq e uma funcao da proprio js\n    let id = parseInt(this.props.match.params.id);\n    setLinkAtual('nenhum'); //nenhum e para nao destacar nenhum link\n\n    let Usuario = await getUsuarioLogado();\n    this.setState({\n      id,\n      Usuario\n    });\n    this.loadQuest();\n  }\n\n  render() {\n    const {\n      Questionarios,\n      page,\n      QuestInfo\n    } = this.state; //desistruturando\n\n    return React.createElement(Div, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Question\\xE1rios do plano de id \", this.state.id, \":\")), //aqui codigo javascript, apos \"=> (\" volta a ser html\n    Questionarios.map(questionario => React.createElement(\"article\", {\n      className: \"blocos\",\n      key: questionario.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"ID: \", questionario.id), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Nome do Question\\xE1rio: \", questionario.nome), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Perguntas do Question\\xE1rio: \", React.createElement(\"button\", {\n      className: \"exibir\",\n      onClick: () => {\n        this.exibirPerguntas(questionario.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Mostrar\"), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.exibirPerg.get(questionario.id) && questionario.perguntas.map(pergunta => React.createElement(\"article\", {\n      className: \"blocos\",\n      key: pergunta.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Pergunta: \", pergunta.descricao), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \" Op\\xE7\\xF5es: \", React.createElement(\"button\", {\n      className: \"exibir\",\n      onClick: () => {\n        this.exibirOpcPerg(pergunta.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Mostrar\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.exibirOpcPerg.get(pergunta.id) && pergunta.opcoes.map(opcao => React.createElement(\"article\", {\n      className: \"opcoes\",\n      key: opcao.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, opcao.descricao), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))))))))), React.createElement(\"div\", {\n      className: \"actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: page === 0,\n      onClick: this.prevPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Anterior\"), React.createElement(\"button\", {\n      disabled: page === QuestInfo.pages,\n      onClick: this.nextPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Pr\\xF3xima\")));\n  }\n\n}","map":{"version":3,"sources":["/home/dho/Documentos/InCo/frontend/src/pages/UsuariosLogados/QuestsPlano/index.js"],"names":["React","Component","gql","api","getUsuarioLogado","setLinkAtual","Div","QuestsPlano","state","id","Questionarios","page","exibirPerg","Map","exibirOpcPerg","QuestInfo","Usuario","loadQuest","query","variables","usuario_id","then","response","Quests","aux","quest","data","plano","questionarios","length","push","setState","pages","catch","e","console","log","exibirPerguntas","exibir","get","set","error","componentDidMount","parseInt","props","match","params","render","map","questionario","nome","perguntas","pergunta","descricao","opcoes","opcao","prevPage","nextPage"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport gql from \"graphql-tag\"\n\nimport api from '../../../services/api'\nimport { getUsuarioLogado } from '../../../services/auth';\nimport { setLinkAtual } from '../../../utils/DestacaLink'\nimport Div from './styles'\n\nexport default class QuestsPlano extends Component {\n    state = { //state e um objeto\n        id: 0,\n        Questionarios: [],\n        page: 0,\n        exibirPerg : new Map(),\n        exibirOpcPerg : new Map(),\n        QuestInfo: {},\n        Usuario: {}\n    }\n\n    //componentDidMount executa assim que e criado a pagina\n    async componentDidMount() { //nao clk o \"() => \", pq e uma funcao da proprio js\n        let id = parseInt(this.props.match.params.id);\n        setLinkAtual('nenhum')//nenhum e para nao destacar nenhum link\n        let Usuario = await getUsuarioLogado()\n        this.setState({id, Usuario})\n        this.loadQuest();\n    }\n\n    loadQuest = async (page = 0) => {\n        const { id, Usuario } = this.state\n        await api.query({\n            query: gql`\n                query(\n                    $id: Int\n                    $usuario_id: Int\n                )\n                {\n                    plano(\n                        filtro: { id: $id usuario_id: $usuario_id }\n                    ){\n                        questionarios { id, nome, perguntas { id descricao opcoes { id descricao }}}\n                    }\n                }\n            `,\n            variables: {\n                id,\n                usuario_id: Usuario.id,\n            }\n        }).then(response => {\n            //Simular uma paginasao, ate eu coloca-la no backend ou retirar\n            var Quests = []\n            var aux = []\n            for(let quest of response.data.plano.questionarios){\n                if(aux.length < 10){\n                    aux.push(quest)\n                }else {\n                    Quests.push(aux)\n                    aux = []\n                    aux.push(quest)\n                }\n            }\n            if (aux.length > 0) Quests.push(aux)\n            this.setState({ Questionarios: Quests[page], QuestInfo: {pages: Quests.length-1}});\n        }).catch(e => {\n            console.log(e)\n        })       \n    };\n\n    \n    exibirPerguntas = (id) => {\n        let { exibirPerg } = this.state\n        try {\n            let exibir = exibirPerg.get(id)\n            if(exibir){\n                exibirPerg.set(id, false)\n            } else {\n                exibirPerg.set(id, true)  \n            }\n        } catch (error) {\n            exibirPerg.set(id, true)            \n        }\n        this.setState({exibirPerg})\n    }\n    \n    exibirOpcPerg = (id) => {\n        let { exibirOpcPerg } = this.state\n        try {\n            let exibir = exibirOpcPerg.get(id)\n            if(exibir){\n                exibirOpcPerg.set(id, false)\n            } else {\n                exibirOpcPerg.set(id, true)  \n            }\n        } catch (error) {\n            exibirOpcPerg.set(id, true)            \n        }\n        this.setState({exibirOpcPerg})\n    }\n\n    render(){\n        const { Questionarios, page, QuestInfo} = this.state; //desistruturando\n        return (\n            <Div>\n                <div className='header'>\n                    <h1>Questionários do plano de id {this.state.id}:</h1>\n                </div>\n                {//aqui codigo javascript, apos \"=> (\" volta a ser html\n                Questionarios.map(questionario => (\n                            <article className= 'blocos' key={questionario.id}>\n                                <strong>ID: {questionario.id}</strong>\n                                <br/>\n                                <strong>Nome do Questionário: {questionario.nome}</strong>\n                                <br/>\n                                <strong>Perguntas do Questionário: <button className='exibir' onClick={() => {this.exibirPerguntas(questionario.id)}}>Mostrar</button> </strong>\n                                <br/>\n                                <ul>\n                                {   this.state.exibirPerg.get(questionario.id) &&\n                                    questionario.perguntas.map(pergunta => (\n                                    <article className= 'blocos' key={pergunta.id}>\n                                        <br/>\n                                        <strong>Pergunta: {pergunta.descricao}</strong>\n                                        <br/>\n                                        <strong> Opções: <button className='exibir' onClick={() => {this.exibirOpcPerg(pergunta.id)}}>Mostrar</button></strong>\n                                        <br/>\n                                        <ul>\n                                        {   this.state.exibirOpcPerg.get(pergunta.id) &&\n                                            pergunta.opcoes.map(opcao => (\n                                            <article className='opcoes' key={opcao.id}>\n                                                <br/>\n                                                <li>{opcao.descricao}</li>\n                                                <br/>\n                                            </article> \n                                            ))\n                                        }\n                                        </ul>\n                                    </article> \n                                    ))\n                                }\n                                </ul>                                \n                            </article>\n                    ))\n                }\n                <div className=\"actions\">\n                    <button disabled={page === 0} onClick={this.prevPage}>Anterior</button>\n                    <button disabled={page === QuestInfo.pages} onClick={this.nextPage}>Próxima</button>\n                </div>\n            </Div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/dho/Documentos/InCo/frontend/src/pages/UsuariosLogados/RespondeAval/index.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext, DotGroup } from 'pure-react-carousel';\nimport 'pure-react-carousel/dist/react-carousel.es.css';\nimport api from '../../../services/api';\nimport { descriptografar } from '../../../utils/criptografia';\nimport { setLinkAtual } from '../../../utils/DestacaLink';\nimport { Div, Container } from \"./style\";\nimport Radiobox from \"../../../components/Radiobox\";\nimport Checkbox from \"../../../components/Checkbox\";\nimport RangeInput from \"../../../components/RangeInput\";\n\nclass RespondeAval extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: '',\n      Pesquisa: {},\n      ListaPerg: [],\n      Respostas: new Map(),\n      valorRange: 0,\n      valorRadioBox: '',\n      valorCheckBox: []\n    };\n\n    this.criarNovaPesquisa = async () => {\n      try {\n        const obj = descriptografar(this.props.match.params.chave);\n        const chave = obj.CH;\n        const pesquisado_id = obj.PI;\n        await api.mutate({\n          mutation: gql`\n                mutation (\n                    $pesquisado_id: Int!\n                    $chave: String!\n                ) {\n                    novaPesquisa(\n                    dados: {\n                        pesquisado_id: $pesquisado_id\n                        chave: $chave\n                    }\n                    ){\n                    id chave pesquisado_id questionario {id nome, perguntas { id descricao opcoes { id descricao }}}\n                    }\n                }\n                `,\n          variables: {\n            pesquisado_id,\n            chave\n          }\n        }).then(response => {\n          this.setState({\n            Pesquisa: response.data.novaPesquisa,\n            ListaPerg: response.data.novaPesquisa.questionario.perguntas\n          });\n          console.log(response.data.novaPesquisa);\n        }).catch(e => {\n          console.log(e);\n        });\n      } catch (error) {\n        alert('Ops...Achou que os parâmetros passados estão incorretos...');\n        window.location.href = `/cadastroPesquisado/`;\n      }\n    };\n\n    this.handleRange = (e, idPerg) => {\n      let {\n        Respostas\n      } = this.state;\n      let valorRange = e.target.value;\n      Respostas.set(idPerg, valorRange);\n      this.setState({\n        Respostas\n      });\n    };\n\n    this.handleText = (e, idPerg) => {\n      let {\n        Respostas\n      } = this.state;\n      let valorText = e.target.value;\n\n      if (valorText.length) {\n        Respostas.set(idPerg, valorText);\n      } else {\n        Respostas.delete(idPerg);\n      }\n\n      this.setState({\n        Respostas\n      });\n    };\n\n    this.handleCheckBox = (e, idPerg, lim = null) => {\n      let {\n        Respostas\n      } = this.state; //Pegando o elemento pai\n\n      let divCheckbox = document.getElementById(`cbGroup${idPerg}`);\n      let checkbox = divCheckbox.getElementsByTagName('input');\n      let count = 0;\n      let valorCheckBox = [];\n\n      for (let i = 0; i < checkbox.length; i += 1) {\n        if (checkbox[i].checked) {\n          count = count + 1;\n          valorCheckBox.push(checkbox[i].value);\n        }\n      }\n\n      if (lim && count > lim) {\n        e.preventDefault();\n        valorCheckBox.pop();\n        e.checked = false;\n      }\n\n      if (valorCheckBox.length) {\n        Respostas.set(idPerg, valorCheckBox.join(', '));\n      } else {\n        //se nenhum selecionado, apaga das respostas\n        Respostas.delete(idPerg);\n      }\n\n      this.setState({\n        Respostas\n      });\n    };\n\n    this.handleRadioBox = (e, idPerg) => {\n      let {\n        Respostas\n      } = this.state; //Pegando o elemento pai\n\n      let divRadiobox = document.getElementById(`rdGroup${idPerg}`);\n      let radiobox = divRadiobox.getElementsByTagName('input');\n      let valorRadioBox = '';\n\n      for (let i = 0; i < radiobox.length; i += 1) {\n        if (radiobox[i].checked) {\n          valorRadioBox = radiobox[i].value;\n        }\n      }\n\n      Respostas.set(idPerg, valorRadioBox);\n      this.setState({\n        Respostas\n      });\n    };\n\n    this.handleBtFinalizar = async () => {\n      let {\n        Respostas,\n        ListaPerg,\n        Pesquisa\n      } = this.state; // const chave = this.props.match.params.id\n\n      if (ListaPerg.length !== Respostas.size) {\n        this.setState({\n          error: 'Responda todas as perguntas, para continuar!'\n        });\n        return null;\n      } else {\n        this.setState({\n          error: null\n        });\n      }\n\n      const RespOrganizadas = new Map([...Respostas.entries()].sort());\n\n      for (let [key, value] of RespOrganizadas) {\n        try {\n          await api.mutate({\n            mutation: gql`\n                        mutation (\n                            $pesquisa_id: Int!\n                            $pergunta_id: Int!\n                            $resposta: String!\n                        ) \n                        {\n                            novaResposta(\n                            dados: {\n                                pesquisa_id: $pesquisa_id\n                                pergunta_id: $pergunta_id\n                                resposta: $resposta\n                            }\n                            ){\n                                id pesquisa_id pergunta_id resposta valor\n                            }\n                        }\n                        `,\n            variables: {\n              pesquisa_id: Pesquisa.id,\n              pergunta_id: key,\n              resposta: value\n            }\n          }).then(response => {\n            console.log(response.data.novaResposta);\n          }).catch(e => {\n            console.log(e);\n          });\n        } catch (error) {\n          alert('Teve um problema ao gravar as respostas, por favor, tente novamente!');\n          return null;\n        }\n      }\n\n      alert('Obrigado por responder, as perguntas do questionário!');\n      window.location.href = `/cadastroPesquisado/`;\n    };\n\n    this.ajustarScroll = () => {\n      var element = document.getElementById('Slider');\n      element.scrollTop = 0;\n      this.setState({\n        error: null\n      });\n    };\n\n    this.render = () => {\n      const {\n        ListaPerg,\n        Pesquisa,\n        Respostas,\n        error\n      } = this.state;\n      let id = 1;\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Div, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Responda as perguntas:\"), Pesquisa.questionario && React.createElement(\"div\", {\n        className: \"InformacoesQuest\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Chave: \", Pesquisa.chave), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Questionario: \", Pesquisa.questionario.nome))), React.createElement(CarouselProvider, {\n        naturalSlideWidth: '100px',\n        naturalSlideHeight: '100px',\n        dragEnabled: false,\n        touchEnabled: false,\n        totalSlides: ListaPerg.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: () => this.ajustarScroll(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(DotGroup, {\n        className: \"navegadores\",\n        dotNumbers: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })), React.createElement(Slider, {\n        className: \"Slider\",\n        id: \"Slider\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, ListaPerg.map(p => React.createElement(Slide, {\n        key: p.id,\n        className: \"Slide\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"QuestionField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"perguntas\",\n        align: \"justify\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        className: \"titulo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Quest\\xE3o \", id++, \":\"), React.createElement(\"strong\", {\n        className: \"pergunta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, p.descricao)), React.createElement(\"div\", {\n        className: \"respostas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, (id - 1) % 2 === 0 && id - 1 !== 6 && React.createElement(React.Fragment, null, React.createElement(Radiobox, {\n        chave: p.id,\n        opcoes: p.opcoes,\n        id: `rdGroup${p.id}`,\n        onClick: e => this.handleRadioBox(e, p.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"Id da op\\xE7\\xE3o selecionada: \", Respostas.get(p.id))), (id - 1) % 2 === 1 && id - 1 !== 5 && React.createElement(React.Fragment, null, React.createElement(Checkbox, {\n        chave: p.id + 99,\n        opcoes: p.opcoes,\n        id: `cbGroup${p.id}`,\n        onClick: e => this.handleCheckBox(e, p.id, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Id das op\\xE7\\xF5es selecionadas: \", Respostas.get(p.id) && Respostas.get(p.id))), id - 1 === 6 && React.createElement(React.Fragment, null, React.createElement(RangeInput, {\n        min: 0,\n        max: 100,\n        step: 20,\n        className: \"myInputRange\",\n        id: \"myInputRange\",\n        onChange: e => this.handleRange(e, p.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"Sua Avalia\\xE7\\xE3o: \", Respostas.get(p.id), \"%\")), id - 1 === 5 && React.createElement(\"textarea\", {\n        className: \"myTextArea\",\n        rows: \"5\",\n        placeholder: \"Digite aqui sua resposta:\",\n        onChange: e => this.handleText(e, p.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      })))))), error && React.createElement(\"p\", {\n        className: \"erro\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, error), React.createElement(\"div\", {\n        className: \"navigationButtons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(ButtonBack, {\n        className: \"myButton\",\n        onClick: () => this.ajustarScroll(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"Anterior\"), React.createElement(\"button\", {\n        className: \"btFinalizar\",\n        onClick: () => this.handleBtFinalizar(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"Finalizar\"), React.createElement(ButtonNext, {\n        className: \"myButton\",\n        onClick: () => this.ajustarScroll(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, \"Pr\\xF3xima\")))));\n    };\n  }\n\n  async componentDidMount() {\n    setLinkAtual('nenhum');\n    window.scrollTo(0, 110);\n    await this.criarNovaPesquisa();\n  }\n\n}\n\nexport default withRouter(RespondeAval);","map":{"version":3,"sources":["/home/dho/Documentos/InCo/frontend/src/pages/UsuariosLogados/RespondeAval/index.js"],"names":["React","Component","withRouter","gql","CarouselProvider","Slider","Slide","ButtonBack","ButtonNext","DotGroup","api","descriptografar","setLinkAtual","Div","Container","Radiobox","Checkbox","RangeInput","RespondeAval","state","error","Pesquisa","ListaPerg","Respostas","Map","valorRange","valorRadioBox","valorCheckBox","criarNovaPesquisa","obj","props","match","params","chave","CH","pesquisado_id","PI","mutate","mutation","variables","then","response","setState","data","novaPesquisa","questionario","perguntas","console","log","catch","e","alert","window","location","href","handleRange","idPerg","target","value","set","handleText","valorText","length","delete","handleCheckBox","lim","divCheckbox","document","getElementById","checkbox","getElementsByTagName","count","i","checked","push","preventDefault","pop","join","handleRadioBox","divRadiobox","radiobox","handleBtFinalizar","size","RespOrganizadas","entries","sort","key","pesquisa_id","id","pergunta_id","resposta","novaResposta","ajustarScroll","element","scrollTop","render","nome","map","p","descricao","opcoes","get","componentDidMount","scrollTo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport gql from \"graphql-tag\"\n\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext, DotGroup} from 'pure-react-carousel';\nimport 'pure-react-carousel/dist/react-carousel.es.css';\n\nimport api from '../../../services/api'\nimport { descriptografar } from '../../../utils/criptografia'\nimport { setLinkAtual } from '../../../utils/DestacaLink'\nimport { Div, Container } from \"./style\"\nimport Radiobox from \"../../../components/Radiobox\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport RangeInput from \"../../../components/RangeInput\"\n\nclass RespondeAval extends Component {\n    state = {\n        error: '',\n        Pesquisa:{},\n        ListaPerg: [],\n        Respostas: new Map(),\n        valorRange: 0,\n        valorRadioBox: '',\n        valorCheckBox: []\n    }\n\n    async componentDidMount() { \n        setLinkAtual('nenhum')\n        window.scrollTo(0,110)\n        await this.criarNovaPesquisa()\n    }\n\n    criarNovaPesquisa = async() => {\n        try {\n            const obj = descriptografar(this.props.match.params.chave)\n            const chave = obj.CH\n            const pesquisado_id = obj.PI\n\n            await api.mutate({\n                mutation: gql`\n                mutation (\n                    $pesquisado_id: Int!\n                    $chave: String!\n                ) {\n                    novaPesquisa(\n                    dados: {\n                        pesquisado_id: $pesquisado_id\n                        chave: $chave\n                    }\n                    ){\n                    id chave pesquisado_id questionario {id nome, perguntas { id descricao opcoes { id descricao }}}\n                    }\n                }\n                `,\n                variables:{\n                    pesquisado_id,\n                    chave,\n                }\n            }).then( response => {\n                this.setState({\n                    Pesquisa: response.data.novaPesquisa,\n                    ListaPerg: response.data.novaPesquisa.questionario.perguntas\n                })\n\n                console.log(response.data.novaPesquisa)\n            }).catch(e => {\n                console.log(e)\n            })\n        } catch (error) {\n            alert('Ops...Achou que os parâmetros passados estão incorretos...')\n            window.location.href= `/cadastroPesquisado/`;\n        }\n        \n        \n    }\n\n    handleRange = (e, idPerg) => {\n        let {Respostas} = this.state\n        let valorRange = e.target.value\n        Respostas.set(idPerg, valorRange)\n        this.setState({Respostas})\n    }\n\n    handleText = (e, idPerg) => {\n        let {Respostas} = this.state\n        let valorText = e.target.value\n        if(valorText.length){\n            Respostas.set(idPerg, valorText)\n        } else {\n            Respostas.delete(idPerg)\n        }\n        this.setState({Respostas})\n    }\n\n    handleCheckBox = (e, idPerg, lim=null) => {\n        let {Respostas} = this.state\n        //Pegando o elemento pai\n        let divCheckbox = document.getElementById(`cbGroup${idPerg}`)\n        let checkbox = divCheckbox.getElementsByTagName('input') \n        let count = 0\n        let valorCheckBox = []\n        for (let i = 0; i < checkbox.length; i += 1) {\n            if (checkbox[i].checked) {\n                count = count + 1\n                valorCheckBox.push(checkbox[i].value)\n            }\n        }\n        if(lim && count > lim){\n            e.preventDefault()\n            valorCheckBox.pop()\n            e.checked = false\n        }\n        if(valorCheckBox.length){\n            Respostas.set(idPerg, valorCheckBox.join(', '))\n        }else{//se nenhum selecionado, apaga das respostas\n            Respostas.delete(idPerg)\n        }\n        this.setState({Respostas}) \n    }\n\n    handleRadioBox = (e, idPerg) => {\n        let {Respostas} = this.state\n        //Pegando o elemento pai\n        let divRadiobox = document.getElementById(`rdGroup${idPerg}`)\n        let radiobox = divRadiobox.getElementsByTagName('input') \n\n        let valorRadioBox = ''\n        for (let i = 0; i < radiobox.length; i += 1) {\n            if (radiobox[i].checked) {\n                valorRadioBox = radiobox[i].value\n            }\n        }\n        Respostas.set(idPerg, valorRadioBox)\n        this.setState({Respostas})\n    }\n\n    handleBtFinalizar = async () => {\n        let {Respostas, ListaPerg, Pesquisa} = this.state\n        // const chave = this.props.match.params.id\n        if(ListaPerg.length !== Respostas.size){\n            this.setState({error: 'Responda todas as perguntas, para continuar!'})\n            return null\n        }else{\n            this.setState({error: null})\n        }\n        const RespOrganizadas =  new Map([...Respostas.entries()].sort())\n\n        for(let [key, value] of RespOrganizadas){\n            try {\n                await api.mutate({\n                    mutation: gql`\n                        mutation (\n                            $pesquisa_id: Int!\n                            $pergunta_id: Int!\n                            $resposta: String!\n                        ) \n                        {\n                            novaResposta(\n                            dados: {\n                                pesquisa_id: $pesquisa_id\n                                pergunta_id: $pergunta_id\n                                resposta: $resposta\n                            }\n                            ){\n                                id pesquisa_id pergunta_id resposta valor\n                            }\n                        }\n                        `,\n                        variables:{\n                            pesquisa_id: Pesquisa.id,\n                            pergunta_id: key,\n                            resposta: value,\n                        }\n                }).then( response => {\n                    console.log(response.data.novaResposta)\n                }).catch(e => {\n                    console.log(e)\n                })\n            } catch (error) {\n                alert('Teve um problema ao gravar as respostas, por favor, tente novamente!')\n                return null\n            }\n        }\n        alert('Obrigado por responder, as perguntas do questionário!')\n        window.location.href= `/cadastroPesquisado/`;\n    }\n\n    ajustarScroll = () => {\n        var element = document.getElementById('Slider')\n        element.scrollTop = 0;\n        this.setState({error: null})\n    }\n\n   render = () => {\n    const { ListaPerg, Pesquisa, Respostas, error } = this.state\n    let id = 1;\n    return (\n      <Container>\n        <Div>\n            <header>\n                <h3>Responda as perguntas:</h3>\n                {\n                    Pesquisa.questionario &&\n                    <div className='InformacoesQuest'>\n                        <p>Chave: {Pesquisa.chave}</p>\n                        <p>Questionario: {Pesquisa.questionario.nome}</p>\n                    </div>\n                }\n            </header>\n            <CarouselProvider\n                naturalSlideWidth={'100px'}\n                naturalSlideHeight={'100px'}\n                dragEnabled={false}\n                touchEnabled={false}\n                totalSlides={ListaPerg.length}\n            >\n                <div onClick={() => this.ajustarScroll()}>{/*Para ativar o onClick*/}\n                    {/*SUPORTA numero limitado de perguntas */}\n                    <DotGroup className='navegadores' dotNumbers={true}/>\n                </div>\n                <Slider className='Slider' id='Slider'>\n                    {\n                        ListaPerg.map(p => (\n                            <Slide key={p.id} className='Slide'>\n                                <div className=\"QuestionField\" >\n                                    <div className='perguntas' align=\"justify\">\n                                        <strong className='titulo'>Questão {id++}:</strong>\n                                        <strong className='pergunta'> \n                                        { p.descricao }\n                                        </strong>\n                                    </div>{/*fim da div pergunta*/}\n                                    <div className='respostas'>\n                                        {(id-1)%2===0 && (id-1)!==6 && \n                                            <>\n                                                <Radiobox \n                                                    chave={p.id} \n                                                    opcoes={p.opcoes}\n                                                    id={`rdGroup${p.id}`}\n                                                    onClick={e => this.handleRadioBox(e, p.id)}\n                                                />\n                                                <strong>Id da opção selecionada: {Respostas.get(p.id)}</strong>\n                                            </> \n                                        }\n                                        {(id-1)%2===1 && (id-1)!==5 &&\n                                            <>\n                                                <Checkbox \n                                                    chave={p.id+99} \n                                                    opcoes={p.opcoes}\n                                                    id={`cbGroup${p.id}`}\n                                                    onClick={e => this.handleCheckBox(e, p.id, 2)}\n                                                />\n                                                <strong>Id das opções selecionadas: {Respostas.get(p.id) && Respostas.get(p.id)}</strong>\n                                            </>\n                                        }\n                                        {(id-1)===6 && \n                                            <>\n                                                <RangeInput \n                                                    min={0} \n                                                    max={100} \n                                                    step={20} \n                                                    className= 'myInputRange'\n                                                    id='myInputRange'\n                                                    onChange={e => this.handleRange(e, p.id)}\n                                                />\n                                                <strong>Sua Avaliação: {Respostas.get(p.id)}%</strong>\n                                            </>\n                                        }\n                                        {(id-1)===5 &&\n                                            <textarea \n                                                className='myTextArea' \n                                                rows='5'\n                                                placeholder='Digite aqui sua resposta:'\n                                                onChange={e => this.handleText(e, p.id)}\n                                            />\n                                        }\n                                    </div>{/*fim da div respostas*/}\n                                </div>{/*fim da div QuestionFields*/}\n                            </Slide>   \n                        ))\n                    }\n                </Slider>\n                {error && <p className='erro'>{error}</p>}\n                <div className='navigationButtons'>\n                    <ButtonBack \n                        className='myButton'\n                        onClick={() => this.ajustarScroll()}\n                    >\n                        Anterior\n                    </ButtonBack>\n\n                    <button \n                        className='btFinalizar'\n                        onClick={() => this.handleBtFinalizar()}\n                    >\n                        Finalizar\n                    </button>\n\n                    <ButtonNext \n                        className='myButton'\n                        onClick={() => this.ajustarScroll()}\n                    >\n                        Próxima\n                    </ButtonNext>\n                </div>\n            </CarouselProvider>  \n        </Div>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(RespondeAval);"]},"metadata":{},"sourceType":"module"}
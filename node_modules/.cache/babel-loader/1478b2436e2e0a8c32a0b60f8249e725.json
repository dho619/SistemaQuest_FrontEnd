{"ast":null,"code":"import { getToken } from \"./auth\";\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory'; //endereco api\n\nconst httpLink = createHttpLink({\n  uri: 'http:localhost:4000/'\n}); //ApolloLink\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = getToken();\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst api = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n}); // api.interceptors.request.use(async config => {\n//   const token = getToken()\n//   if (token) {\n//     config.headers.Authorization = token\n//   }\n//   return config\n// })\n\nexport default api;","map":{"version":3,"sources":["/home/dho/Documentos/InCo/frontend/src/services/api.js"],"names":["getToken","ApolloClient","createHttpLink","setContext","InMemoryCache","httpLink","uri","authLink","_","headers","token","authorization","api","link","concat","cache"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B,C,CAEA;;AACA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B,C,CAGA;;AACA,MAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC5C,QAAMC,KAAK,GAAGV,QAAQ,EAAtB;AACA,SAAO;AACLS,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPE,MAAAA,aAAa,EAAED,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAsB;AAFnC;AADJ,GAAP;AAMH,CAR0B,CAA3B;AAUA,MAAME,GAAG,GAAG,IAAIX,YAAJ,CAAiB;AAC3BY,EAAAA,IAAI,EAAEN,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CADqB;AAE3BU,EAAAA,KAAK,EAAE,IAAIX,aAAJ;AAFoB,CAAjB,CAAZ,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeQ,GAAf","sourcesContent":["import { getToken } from \"./auth\"\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\n//endereco api\nconst httpLink = createHttpLink({\n  uri: 'http:localhost:4000/'\n})\n//ApolloLink\nconst authLink = setContext((_, { headers }) => {\n    const token = getToken()\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}`: ''\n      }\n    }\n})\n\nconst api = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\n// api.interceptors.request.use(async config => {\n//   const token = getToken()\n//   if (token) {\n//     config.headers.Authorization = token\n//   }\n//   return config\n// })\n\nexport default api;"]},"metadata":{},"sourceType":"module"}